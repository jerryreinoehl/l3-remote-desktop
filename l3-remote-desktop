#!/usr/bin/env python3
from dataclasses import dataclass
from enum import StrEnum
from pathlib import Path

import argparse
import base64
import getpass
import os
import requests
import subprocess
import sys
import yaml


@dataclass
class Context:

    username: str = None
    password: str = None
    pin: str = None
    token: str = None
    domain: str = None
    smartcard_pin: str = None


class UI:

    BOLD_CYAN = "1;36"
    BOLD_GREEN = "1;32"
    GREEN = "32"

    def __init__(self, debug=False):
        self._debug = debug

    def print(self, s, width=None, color=None, **kwargs):
        if width:
            s = f"{s:>{width}}"

        if color:
            s = f"\x1b[{color}m{s}\x1b[0m"

        print(s, **kwargs)

    def input(self, prompt, **kwargs):
        self.print(prompt, end="", color=self.BOLD_CYAN, flush=True, **kwargs)
        return input()

    def getpass(self, prompt, **kwargs):
        self.print(prompt, end="", color=self.BOLD_CYAN, flush=True, **kwargs)
        return getpass.getpass(prompt="")

    def info(self, msg, **kwargs):
        self.print(msg, color=self.GREEN, **kwargs)

    def success(self, msg, **kwargs):
        self.print(msg, color=self.BOLD_GREEN, **kwargs)

    def error(self, msg):
        print("Error: " + msg)

    def fatal(self, msg, code=1):
        print(msg, file=sys.stderr)
        exit(code)


class RDPParser:

    TYPE_INT = "i"
    TYPE_STR = "s"

    @classmethod
    def parse(cls, content: str):
        settings = RDPSessionSettings()

        for line in content.splitlines():
            # Each line should have <setting>:<type>:<value>.
            # Type is either "i" for integer or "s" for string.
            fields = line.split(":")
            if len(fields) != 3:
                continue

            key, type, value = fields
            if type == cls.TYPE_INT:
                value = int(value)

            match key:
                case "full address":
                    settings.server(value)
                case "gatewayaccesstoken":
                    settings.gateway_access_token(value)
                case "gatewayhostname":
                    settings.gateway_hostname(value)
                case "server port":
                    settings.port(value)

        return settings


class RDPSessionSettings:

    SEC_RDP = "rdp"
    SEC_TLS = "tls"
    SEC_NLA = "nla"
    SEC_EXT = "ext"
    SEC_AAD = "aad"

    @dataclass
    class Floatbar:

        class Visibility(StrEnum):
            VISIBLE = "visible"
            HIDDEN = "hidden"

        class Show(StrEnum):
            ALWAYS = "always"
            FULLSCREEN = "fullscreen"
            WINDOW = "window"

        sticky: bool = False
        # Corresponds to /floatbar:default xfreerdp argument.
        visibility: Visibility = None
        show: Show = None

    def __init__(self):
        self._server: str = None
        self._port: int = None
        self._fullscreen: bool = False
        self._clipboard: bool = False
        self._gateway_hostname: str = None
        self._gateway_port: int = None
        self._gateway_access_token: str = None
        self._security_protocol: str = None
        self._smartcard: str = None
        self._smartcard_logon_pin: str = None
        self.floatbar: self.Floatbar = None

    def server(self, value: str):
        self._server = value
        return self

    def port(self, value: int):
        self._port = value
        return self

    def security_protocol(self, value: str):
        self._security_protocol = value
        return self

    def fullscreen(self, value: bool):
        self._fullscreen = value
        return self

    def clipboard(self, value: bool):
        self._clipboard = value
        return self

    def gateway_hostname(self, value: str):
        self._gateway_hostname = value
        return self

    def gateway_port(self, value: int):
        self._gateway_port = value
        return self

    def gateway_access_token(self, value: str):
        self._gateway_access_token = value
        return self

    def smartcard(self, value: str):
        self._smartcard = value
        return self

    def smartcard_logon_pin(self, value: str):
        self._smartcard_logon_pin = value
        return self


class FreeRDPSession:

    def __init__(self, settings: RDPSessionSettings):
        self._settings = settings

    def _generate_command(self):
        cmd = ["xfreerdp3"]

        if self._settings._fullscreen:
            cmd.append("/f")

        if self._settings._clipboard:
            cmd.append("/clipboard")

        floatbar = self._get_floatbar_argument()
        if floatbar is not None:
            cmd.append(floatbar)

        if self._settings._security_protocol:
            cmd.append(f"/sec:{self._settings._security_protocol}")

        if self._settings._smartcard is not None:
            if self._settings._smartcard == "":
                cmd.append("/smartcard")
            else:
                cmd.append(f"/smartcard:{self._settings._smartcard}")

        if self._settings._smartcard_logon_pin:
            cmd.append(f"/smartcard-logon:pin:{self._settings._smartcard_logon_pin}")

        if self._settings._server:
            cmd.append(f"/v:{self._settings._server}")

        if self._settings._port:
            cmd.append(f"/port:{self._settings._port}")

        gateway_args = dict()
        if self._settings._gateway_hostname:
            gateway_args["g"] = self._settings._gateway_hostname

        if self._settings._gateway_access_token:
            gateway_args["access-token"] = self._settings._gateway_access_token

        cmd.append("/gateway:" + ",".join(f"{k}:{v}" for k, v in gateway_args.items()))

        print(cmd)
        return cmd

    def _get_floatbar_argument(self):
        if self._settings.floatbar is None:
            return None

        args = []
        floatbar = self._settings.floatbar

        if floatbar.sticky is not None:
            args.append("sticky:" + ("on" if floatbar.sticky else "off"))

        if floatbar.visibility is not None:
            args.append("default:" + floatbar.visibility.value)

        if floatbar.show is not None:
            args.append("show:" + floatbar.show.value)

        return "/floatbar:" + ",".join(args)

    def launch(self):
        cmd = self._generate_command()
        p = subprocess.Popen(cmd)
        p.wait()
        breakpoint()


class PortalSession:

    class PortalSessionError(RuntimeError): ...

    class InitializationError(PortalSessionError): ...

    class AuthenticationError(PortalSessionError): ...

    class RDPRequestError(PortalSessionError): ...

    def __init__(self):
        self._session = requests.Session()
        self.initialize_session()

    def test(self):
        raise self.RDPRequestError("")

    def initialize_session(self):
        res = self._session.get("https://portal.l3t.com")
        if not res.ok:
            raise self.InitializationError()

    def authenticate(self, username, password, pin, token, vhost="standard"):
        data = dict(
            username=username,
            password=password,
            rsapassword=pin + token,
            vhost=vhost,
        )
        res = self._session.post("https://portal.l3t.com/my.policy", data=data)
        if not res.ok:
            raise self.AuthenticationError()

    def request_rdp_session(self, domain):
        domain_b64 = base64.b64encode(bytes(domain, "utf-8")).decode()
        res = self._session.get(
            f"https://portal.l3t.com/f5vdi/rdp/launch/Portal_L3T/Enterprise_Remote_Desktop?{domain_b64}"
        )
        if not res.ok:
            raise self.RDPRequestError()

        return RDPParser.parse(res.content.decode())


def main():
    ui = UI()
    args = parse_args()

    if args.config is None:
        args.config = get_config_path()

    ctx = load_context(ui, args.config)

    ui.info("Connecting to portal...")
    session = PortalSession()
    ui.success("Connected.")
    # Load user info right before authenticating so token doesn't expire.
    load_user_info(ui, ctx)

    ui.info("Authenticating...")
    session.authenticate(ctx.username, ctx.password, ctx.pin, ctx.token)
    ui.success("Authenticated.")

    rdp_settings = session.request_rdp_session(ctx.domain)

    print(rdp_settings.__dict__)
    #with open("content", "r") as f:
    #    rdp_settings = RDPParser.parse(f.read())

    rdp_settings \
        .fullscreen(True) \
        .security_protocol(RDPSessionSettings.SEC_RDP) \
        .clipboard(True) \
        .smartcard("") \
        .smartcard_logon_pin(ctx.smartcard_pin)

    rdp_settings.floatbar = RDPSessionSettings.Floatbar(sticky=False)

    print(rdp_settings.__dict__)

    rdp_session = FreeRDPSession(rdp_settings)

    ui.info("Launching RDP session...")
    rdp_session.launch()


def get_config_path():
    config = Path("l3-remote-desktop/l3-remote-desktop.yml")

    if "XDG_CONFIG_HOME" in os.environ:
        return Path(os.environ["XDG_CONFIG_HOME"]) / config
    else:
        return Path("~/.config") / config


def load_context(ui, config):
    if not config.exists() or not config.is_file():
        return Context()

    with config.open() as f:
        try:
            data = yaml.safe_load(f.read())
        except yaml.scanner.ScannerError as e:
            print(e, file=sys.stderr)
            ui.fatal(f"Failed reading config: {config}")

    return Context(**data)


def load_user_info(ui, ctx):
    prompt_width = 15

    if ctx.username is None:
        ctx.username = ui.input("Username: ", width=prompt_width)
    if ctx.domain is None:
        ctx.domain = ui.input("Domain: ", width=prompt_width)
    if ctx.password is None:
        ctx.password = ui.getpass("Password: ", width=prompt_width)
    if ctx.smartcard_pin is None:
        ctx.smartcard_pin = ui.getpass("Smartcard Pin: ", width=prompt_width)
    if ctx.pin is None:
        ctx.pin = ui.getpass("RSA Pin: ", width=prompt_width)
    if ctx.token is None:
        ctx.token = ui.input("Token: ", width=prompt_width)


def parse_args():
    parser = argparse.ArgumentParser(
        prog="L3Harris Remote Desktop",
        description="Launch remote desktop session",
    )

    parser.add_argument("-c", "--config", type=Path)

    return parser.parse_args()


if __name__ == "__main__":
    main()
